







-------------------------------- HAFTA 1 --------------------------------


>>>>> 10'LU TABANDAN N'Lİ TABANA GEÇİŞ

> Örnek 1

(123)_10 = (?)_2

123 = 61 * 2 + 1
61 = 30 * 2 + 1
30 = 15 * 2 + 0
15 = 7 * 2 + 1
7 = 3 * 2 + 1
3 = 1 * 2 + 1
1 = 0 * 2 + 1

tersten okursan  =>  (1111011)_2


> Örnek 2

(123)_10 = (?)_8

123 = 15 * 8 + 3
15 = 1 * 8 + 7
1 = 0 * 8 + 1

tersten okursan  =>  (173)_8




>>>>> VİRGÜLLÜ İKEN TABAN DÖNÜŞÜMÜ

Her adımda tam kısmı not alıp eğer varsa çıkartıp, çıkarttığın şeyi 2 ile çarparak devam edersin.

> Örnek 1

(0.625)_10 = (?)_2

0.625  =>  tam kısım 0
0.625*2 = 1.25  =>  tam kısım 1
0.25*2 = 0.5  =>  tam kısım 0
0.5*2 = 1.0  =  tam kısım 1

yukarıdan aşağı okursan  =>  (0.101)_2


> Örnek 2

(0.2)_10 = (?)_2

0.2  =>  tam kısım 0
0.4  =>  tam kısım 0
0.8  =>  tam kısım 0
1.6  =>  tam kısım 1
0.6*2 = 1.2  =>  tam kısım 1
0.2*2 = 0.4  =>  tam kısım 0
...

yukarıdan aşağı okursan  =>  (0.00110011...)_2




>>>>> BİLGİSAYARLARDA VERİ FORMATLARI

word sized data  =>  16 bitlik binary sayı
double word sized data  =>  32 bitlik binary sayı

bu iki tür de her byte'ının saklanma yerine göre little endian / big endian olabilir.





>>>>> 8086 YAZMAÇLARI

Yazmaçlar, bilgisayar bellek birimleri hiyerarşisinde bir bellek birimidir
Yazmaçlar, mikroişlemcilerin içinde bulunur

mikroişlemciler  <=>  cache  <=>  RAM  <=>  disk

sola doğru giderken üretim maliyeti artar, hafıza kapasitesi azalır
burada maliyet arttığından bir mühendislik yapıp kolayca erişilebilir register'lar (yazmaçlar) kullanıyoruz ki performans artsın




>>> GENEL AMAÇLI YAZMAÇLAR

Bu yazmaçlar kod içinde erişebildiğimiz genel yazmaçlardır (SP dışında).

Türleri  =>  AX (AL,AH), BX (BL,BH), CX (CL,CH), DX (DL,DH), BP, DI, SI, SP


> AX (AL,AH)

AX, 16 bitlik accumulator yazmacıdır
AH, AL; 8 bitlik accumulator yazmaçlardır  (accumulator high/low kısaltmaları)

Genelde aritmetik/lojik/veri_transferi işlemlerinde kullanılırlar
Çarpma (MUL) ve bölme (DIV) işlemlerinde gizli operand olarak kullanılırlar
I/O komutlarında da varsayılan operand olarak kullanılırlar ancak bu derste I/O üzerine durmayacağız


> BX (BL,BH)

BX, 16 bitlik base register yazmacıdır
BL, BH; 8 bitlik base register yazmaçlarıdır

Dizi şeklinde [...] yazımıyla yapılan veri erişiminde kullanılırlar
Bu veri erişiminde yalnızca BX kullanılabilir, BL/BH kullanılamaz

BX'i bir array'in ilk adresini tutan bir yazmaç olarak düşünebiliriz


> CX (CL,CH)

CX, 16 bitlik count yazmacıdır
CL, CH; 8 bitlik count yazmaçlarıdır

CX, tekrarlı işlemlerde tekrar sayısını (indeksi) saklar
CL, öteleme ve kaydırma işlemlerinde tekrar sayısını saklar
Ayrıca CX ve CL döngü işlemlerinde de kullanılır


> DX (DL,DH)

DX, 16 bitlik data yazmacıdır
DL, DH; 8 bitlik data yazmaçlarıdır

Aynı AX gibi, MUL ve DIV işlemlerinde kullanılırlar (bölünen sayıyı oluştururlar)
Aynı AX gibi, I/O işlemlerinde varsayılan operand olarak kullanılırlar


> SP, BP

SP, stack pointer yazmacıdır ve mikroişlemci tarafından otomatik olarak güncellenir
PUSH, CALL, POP, RET vb. yığınla ilgili herhangi bir işlem çalıştığında yığının en üst adresini işaretlemeye yarar
Her zaman çift bir değeri gösterir
WORD tipinde bir veriyi gösterir

BP, base pointer yazmacıdır ve mikroişlemci tarafından otomatik olarak güncellenmez!
Fonksiyonlara parametre aktarılırken kullanılır

SP de BP de genelde SS yazmacı ile birlikte kullanılır


> SI, DI

SI, source index yazmacıdır
DI, destination index yazmacıdır

İkisi de string komutlarında indeks tutmada kullanılır



>>> SEGMENT YAZMAÇLARI & ÖZEL AMAÇLI YAZMAÇLAR

8086 mimarisinde 16 bit yazmaçlar varken 20 bit adres yolları oluşturmamız gerekmektedir
Intel bu sorunu çözmek için segment ve offset yazmaçları tanımlamış
Adres yolu oluştururken "segment * 10H + offset" yapıyoruz
Ancak burada her segment'in çalıştığı belirli offset yazmaçları bulunmaktadır

Segment yazmaçları  =>  CS, DS, ES, SS    (code segment, data segment, extra segment, stack segment)
Özel amaçlı yaz.    =>  IP                (instruction pointer)

SS  =>  BP, SP               (yığının en üstteki adresini gösteriyor)
CS  =>  IP                   (bir sonraki adımda çalıştırılacak komutun adresini gösteriyor)
DS, ES  =>  BX, SI, DI       (değişkenlerin adreslerini gösteriyor)

NOT: burada IP yazmacı mikroişlemci tarafından otomatik olarak değiştirilir



>>> BAYRAK YAZMAÇLARI

Türleri  =>  CF, PF, AF, ZF, SF, TF, IF, DF, OF


CF (Carry flag)                =>  İşaretsiz işlemlerde taşma olursa 1 değerini alır
ZF (Zero flag)                 =>  İşlem sonucu 0 ise ZF=1 olur
SF (Sign flag)                 =>  İşlem sonucu negatif ise SF=1 olur
DF (Direction flag)            =>  Dizgi işlemlerinde başlangıç adresinden itibaren arttırarak/azaltarak sıradaki göze erişimi belirler
OF (Overflow flag)             =>  İşaretli işlemlerde taşma durumunda 1 değerini alır
PF (Parity flag)               =>  İşlem sonucunda 1 olan bitlerin sayısı tek ise 0, çift ise 1 değerini alır
TF (Trap flag)                 =>  Her komuttan sonra kesme oluşmasını sağlar
IF (Interrupt Enable flag)     =>  Kesme kaynaklarının kesme oluşturmasına izin verir
AF (Auxiliary flag)            =>  4 bitlik kısımların toplama çıkarma sonucu elde değerini tutar





>>>  REAL MOD

8086 real modda hafıza adresleme yapar
Real modda sadece 1MB alan adreslenebilir
Tüm bilgisayarlar açıldığında real modda açılır

Örnek: Segment değeri 1000H, ofset değeri 2000H ise mikroişlemcide erişilen fiziki adres ne olur?
1000H * 10H + 2000H = 12000H




-------------------------------- HAFTA 2 --------------------------------


>>>>> 8086 KOMUT YAPISI

Bu derste MASM syntax'ini kullanacağız.
Yorumlar ; simgesinden sonra konur

Genel form:  {etiket:}  MNEMONIC  { {operand1,} operand2 }

Komutlarımız 0,1,2 operand alabiliyor, 3 operand alanlar 8086 sonrasında gelmiştir

8086 mimarisinde komutlar sağdan sola okunur ve atanır
Örneğin "ADD AX, BX" bizim için "AX = AX + BX;" demektir

Operandların tipleri aynı olmalıdır yoksa hata alırız
Eğer aynı değillerse de sözde komut dönüşümü yapılmalıdır
Örneğin "ADD BX, AX" hata vermez çünkü ikisi de 16 bittir
Örneğin "ADD BL, BX" hata verir çünkü BL 8 bit, BX 16 bittir (type mismatch)




>>>>> KOMUTLARDA KULLANACAĞIMIZ KISALTMALAR

acc      =>  accumulator register'ları
reg      =>  herhangi bir register
regb     =>  herhangi bir 8 bitlik register
regw     =>  herhangi bir 16 bitlik register
sreg     =>  herhangi bir segment register'ı  (CS,DS,ES,SS)
mem      =>  [offset] şeklinde yazdığımız bellek erişimi  [DI], [SI], [100H] vb.
idata    =>  herhangi bir immediate işlem verisidir, yani bildiğimiz sayıdır 8/16 bit olabilir  100H vb.
disp8    =>  [-128,127] aralığında bir displacement komutudur
disp16   =>  [-32678, 32678] aralığında bir displacement komutudur
dest     =>  destination, herhangi bir işlemde hedef şeydir
src      =>  source, herhangi bir işlemde kaynak şeydir

NOT: disp8/disp16, jmp gibi iki adresin tutulması gerektiği yerlerde kullanılır, asıl amaçları kaç adım ileri geri gidileceğini tutmaktır çünkü adresi tutmak yerine bu değeri tutmak çok daha mantıklı ve hızlıdır
 



>>>>> VERİ AKTARIM KOMUTLARI

Komutlar:  MOV, LEA, LDS, LES, XCHG, XLAT, XLATB

Bayrak yazmaçları bu komutlardan etkilenmez

NOT: belirttiğimiz hexadecimal değerler eğer bir harf ile bitiyorsa assembler hata vermesin diye başına 0 koyarız
	Örn ABCDH yerine 0ABCDH yazarız, bunlar aynı anlama gelir yalnızca uygulama hata vermesin diye bunu yaparız


>>> MOV

MOV, "move data" demektir ve src kısmına yazılanı dest kısmına yazılana taşır
Not: aksi belirtilmediği halde her hafıza gözü 8 bit olarak düşünülecektir

Form:  MOV dest, src

Kurallar:
	1. dest=mem && src=mem olamaz        =>  "MOV [100H], [200H]"  yanlış
	2. dest=sreg && src=sreg olamaz      =>  "MOV SS, CS" yanlış
	3. dest=sreg && src=idata olamaz     =>  "MOV DS, 100H" yanlış
	4. dest ve src aynı tipte olmalıdır  =>  "MOV AL, DX" yanlış


2'nin önüne geçme:
	MOV AX, CS
	MOV SS, AX

3'ün önüne geçme:
	MOV AX, 100H
	MOV DS, AX


Olası Kullanımlar:
	01. MOV reg, idata
	02. MOV mem, idata
	03. MOV reg, reg
	04. MOV reg, mem
	05. MOV mem, reg
	06. MOV sreg, reg
	07. MOV sreg, mem
	08. MOV reg, sreg
	09. MOV mem, sreg


(1 örnekleri)
	MOV CH, 300       =>  YANLIŞ, 300 sayısı 16 bit old ve CH 8 bit old type mismatch olur
	MOV AX, 1234H     =>  DOĞRU, ikisi de 16 bit
	MOV BL, 'A'       =>  DOĞRU, karakter ascii'de 65'tir ve bu 8 bite sığar
	MOV DX, -1        =>  DOĞRU, -1 ile FFFFH aynıdır ki bu sığar
	MOV BL, 100H      =>  YANLIŞ, 100H dediğimiz "0001 0000 0000" old 8 bite sığmaz
	MOV AX, 1         =>  DOĞRU, AX'e "0000 0000 0000 0001" yani 0001H ataması yapar
	MOV AL, 1         =>  DOĞRU, AL'ye "0000 0001" yani 01H ataması yapar, yukarıdaki ile farkı bit kapasitesine göre 0 koymasıdır

(2 örnekleri)
	MOV [100H], 12H            =>  YANLIŞ, burada 12H değer 8 bit olr mı yoksa 16 bit olr mı yazılacak belli değildir, ek bir şey koymalıyızdır
	MOV WORD PTR [100H], 12H   =>  DOĞRU, burada 16 bit old belirtildiğinden 12H'yi 0012H olr belirtilen bellek gözüne atar
	MOV BYTE PTR [100H], 12H   =>  DOĞRU, burada 8 bit old belirtilmiştir 12H olr [100H] gözüne atar

(3 örnekleri)
	MOV AX, BX       =>  DOĞRU
	MOV DL, CL       =>  DOĞRU
	MOV AH, CS       =>  YANLIŞ, AH 8 bit iken CS 16 bittir
	MOV SI, regb     =>  YANLIŞ, SI 16 bit iken regb'ler 8 bittir

(4 örnekleri)
	MOV BX, [250H]   =>  DOĞRU, diyelim ki 250H'de ABH, 251H'de 12H değerleri var, bu komut BX'e "12ABH" değerini atar
	MOV BL, [250H]   =>  DOĞRU, üstteki varsayıma göre BL'ye "ABH" değerini atar

(5 örnekleri)
	MOV [250H], BX   =>  DOĞRU
	MOV [250H], BL   =>  DOĞRU

(6/8 örnekleri)
	MOV SI, CS    =>  DOĞRU
	MOV CS, SI    =>  DOĞRU

(7/9 örnekleri̇)
	MOV DS, [20H]  =>  DOĞRU
	MOV [20H], DS  =>  DOĞRU



>>> LEA

LEA, "load effective address" demektir
Yaptığı şey belirtilen regw yazmacına memory'nin assembly'nin veri kısmının başından uzaklığını yani offset'ini atamaktır
Genelde değişkenlerle kullanılır

regw <- offset(mem)

Tek kullanımı vardır:  LEA regw, mem


Örnek: 
	Aşağıdaki hafıza durumunun tanımlı değişkenlerle olduğunu varsayın ve işlem sonuçlarında reg'lerin değerlerini bulunuz
	NOT: işlemlerin sırayla çalıştırıldığını düşünün

	0007H  -  FF  
	0006H  -  FF  <= DENEME
	0005H  -  ??  
	0004H  -  ??  <= GCD
	0003H  -  00  
	0002H  -  0F  <= BSAYISI
	0001H  -  00  
	0000H  -  0D  <= ASAYISI
	
	LEA BX, ASAYISI   =>  BX = 0000H olur
	LEA SI, BSAYISI   =>  SI = 0002H olur
	LEA DI, DENEME    =>  DI = 0006H olur
	MOV DX, [DI]      =>  yukarıda DI=0006H olmuştu bu yüzden DX'e 0006H'deki 16 bit değer atanır, DX = FFFFH
	MOV AL, [BX]      =>  yukarıda BX=0000H olmuştu bu yüzden AL'ye 0000H'deki 8 bit değer atanır, AL = 0DH
	MOV AH, [BX+1]    =>  BX+0001H = 0000H+0001H = 0001H old dolayı AH'ye 0001H'den 8 bit değer atanır, AH = 00H



>>> LDS ve LES

LDS, "load data segment" yazmacıdır
LES, "load extra segment" yazmacıdır

LDS'nin yaptığı  =>  regw'ya [mem] atama,  DS'ye  [mem+2] atama
LES'nin yaptığı  =>  regw'ya [mem] atama,  ES'ye  [mem+2] atama

LDS'nin tek kullanımı:  LDS regw, mem
LES'nin tek kullanımı:  LES regw, mem

Bu iki yazmacın LEA'dan farkı çok uzaktaki değerlere ulaşmamız gerektiğinde DS/ES'nin otomatik güncellenmesinin gerekmesidir
LEA'da DS/ES statik bir şekilde duruyorken burada DS/ES'yi de taşımamız gerekmektedir
Örneğin bunlar bir diziye uzaktan değer kopyalaması yapılıyorken kullanılabilir



>>> XCHG

XCHG, "exchange" demektir

Destination ve source'daki değerleri birbirleri ile değiştirir, bildiğimiz değişken swapping'i yapar

Formu:  XCHG dest, src

Kullanımları:
	1. XCHG reg, reg
	2. XCHG reg, mem
	3. XCHG mem, reg



>>> XLAT/XLATB

İkisi de aynı komuttur, anlamları "translate byte"tır

Operandı olmayan bir komuttur, tek kullanım formu:  XLAT

Yaptığı şey DS:[BX] adresindeki tablonun AL numaralı indisindeki değeri AL yazmacına kopyalamaktır




>>>>> ARİTMETİK KOMUTLAR

Türleri:  ADD, ADC, SUB, SBB, INC, DEC, NEG, CMP, MUL, IMUL, DIV, IDIV


>>> ADD, ADC, SUB, SBB

ADD  =>  Eldesiz toplama yapıp bunu dest'e atar
ADC  =>  Eldeli toplama yapıp bunu dest'e atar (add with carry)
SUB  =>  Eldesiz çıkartma yapıp bunu dest'e atar
SBB  =>  Eldeli çıkartma yapıp bunu dest'e atar (subtraction with borrow)

ADD formu:  ADD dest, src      (dest = dest + src)
ADC formu:  ADC dest, src      (dest = dest + src + CF)
SUB formu:  SUB dest, src      (dest = dest - src)
SBB formu:  SBB dest, src      (dest = dest - src - CF)


Dördünün de kullanımları aynıdır:
	1. ADD reg, idata
	2. ADD mem, idata  (... PTR gereklidir)
	3. ADD reg, reg
	4. ADD reg, mem
	5. ADD mem, reg


Örnekler:
	ADD AX, 1                     =>  DOĞRU
	ADD BL, 300                   =>  YANLIŞ, 300 değeri 8 bite sığmaz
	ADD [100H], 12H               =>  YANLIŞ, 8/16 bit şeklinde yazılacağını belirtmemişiz
	ADD WORD PTR [100H], 12H      =>  DOĞRU, 0012H şeklinde ekler
	ADD BYTE PTR [100H], 12H      =>  DOĞRU, 12H şeklinde ekler
	ADD DX, AX                    =>  DOĞRU
	ADD [100H], AX                =>  DOĞRU



>>> INC, DEC, NEG

INC  =>  Değeri bir arttırır
DEC  =>  Değeri bir azaltır
NEG  =>  Değerin negatifini alır

INC formu:  INC dest      (dest = dest + 1)
DEC formu:  DEC dest      (dest = dest - 1)
NEG formu:  NEG dest      (dest = 0 - dest)


Üçünün de kullanımları aynıdır:
	1. INC reg
	2. INC mem    (... PTR gereklidir)


Örnekler:
	INC [101H]              =>  YANLIŞ, PTR belirtilmemiş
	INC WORD PTR [101H]     =>  DOĞRU, PTR belirtilmiş 0001H eklenir
	INC BYTE PTR [101H]     =>  DOĞRU, PTR belirtilmiş 01H eklenir



>>> CMP

Bu komut SUB ile aynı şeyi yapar ancak değeri destination'da saklamak yerine doğrudan bayrak yazmaçlarına atar
Bu bayrak yazmaçlarına yapılan atamaları gelecekte sayı karşılaştırması (<, <=, >, >= vb.) yaparken kullanırız

Formu:  CMP dest, src

Kullanımları:
	1. CMP reg, idata
	2. CMP mem, idata
	3. CMP reg, reg
	4. CMP reg, mem
	5. CMP mem, reg



>>> MUL, IMUL, DIV, IDIV

MUL    =>  unsigned multiplication
DIV    =>  unsigned division
IMUL   =>  integer signed multiplication, sonuç ve operandlar işaretli sayı olarak değerlendirilir
IDIV   =>  integer signed division, sonuç ve operandlar işaretli sayı olarak değerlendirilir


MUL ve IMUL'un yaptığı
	src 8 bit ise   =>  AX = AL * src
	src 16 bit ise  =>  DX:AX = AX * src

DIV ve IDIV'in yaptığı
	src 8 bit ise   =>  AL = AX / src,  AH = AX % src
	src 16 bit ise  =>  AX = DX:AX / src,  DX = DX:AX % src

NOT: bölmede overflow olabileceğinden OF bayrağı vardır, overflow oluşunca OF=1 olur 


Hepsinin genel formu:  MUL src


Hepsinin kullanımları:
	MUL reg
	MUL mem    (... PTR gereklidir)


Örnekler:
	MUL AL                 =>  DOĞRU, AX = AL * AL = AL^2 yapılmış olur
	MUL BX                 =>  DOĞRU, DX:AX = AX * BX
	MUL [100H]             =>  YANLIŞ, PTR kullanılmadı
	MUL WORD PTR [100H]    =>  DOĞRU
	MUL BYTE PTR [100H]    =>  DOĞRU
	130 * 552 işlemi       =>  sırayla "MOV AX, 552", "MOV BX, 130", "MUL BX"
	(-2) * (-1000) işlemi  =>  sırayla "MOV AX, -2", "MOV BX, -1000", "IMUL BX"





>>>>> MANTIKSAL KOMUTLAR

İki sayının her biti için işlemi teker teker uygularlar ve yeni bir sayı oluştururlar.

Türleri:  NOT, OR, AND, XOR, TEST


>>> NOT

Formu:   NOT dest

Kullanımları:
	NOT reg
	NOT mem     (... PTR gereklidir)



>>> OR, AND, XOR, TEST

OR, AND, XOR  yeni değerleri dest'e atarken TEST işlemi AND ile aynı olup yalnızca bayrakları değiştirir.

Genel formları:  OR dest src

Kullanımları:
	1. AND reg, idata
	2. AND mem, idata     (... PTR gereklidir)
	3. AND reg, reg
	4. AND reg, mem
	5. AND mem, reg


Örnekler:
	XOR reg, reg     =>  DOĞRU, reg'e 0 değerini atamaya yarar





-------------------------------- HAFTA 3 --------------------------------


>>>>> DALLANMA KOMUTLARI

Bu komutlar if/else yazmamızı sağlarlar.

Dallanma:
	- Koşullu Dallanma
		- Basit Koşullu Dallanma                           =>  yalnızca bir bayrağa bakar
		- Karmaşık Koşulla Dallanma (İşaretsiz/İşaretli)   =>  birden fazla bayrağa bakar, CMP sonrasında çalıştırılırlar
	- Koşulsuz Dallanma      =>  JMP komutu
	- Çağırma Komutları
	- Dönüş Komutları



Basit Koşullu Dallanma:
	- JZ/JE       =>  ZF=1 ise dallan
	- JNZ/JNE     =>  ZF=0 ise dallan
	- JS          =>  SF=1 ise dallan
	- JNS         =>  SF=0 ise dallan
	- JO          =>  OF=1 ise dallan
	- JNO         =>  OF=0 ise dallan
	- JP/JPE      =>  PF=1 ise dallan
	- JNP/JPO     =>  PF=0 ise dallan



İşaretsiz Sayı İşlemlerinde Dallanma:
	- JB/JNAE/JC     =>  op1 <  op2     (below)
	- JA/JNBE        =>  op1 >  op2     (above)
	- JAE/JNB/JNC    =>  op1 >= op2     (above or equal)
	- JBE/JNA        =>  op1 <= op2     (below or equal)



İşaretli Sayı İşlemlerinde Dallanma:
	- JL/JNGE        =>  op1 <  op2     (less)
	- JG/JNLE        =>  op1 >  op2     (greater)
	- JGE/JNL        =>  op1 >= op2     (greater or equal)
	- JLE/JNG        =>  op1 <= op2     (less or equal)



İşlemci koşullara nasıl karar verir:  (İŞARETSİZ | İŞARETLİ)
	dest >  src   =>  CF=0, ZF=0      |  SF=OF, ZF=0,
	dest >= src   =>  CF=0            |  SF=OF
	dest =  src   =>  ZF=1            |  ZF=1
	dest <= src   =>  CF=1 VEYA ZF=1  |  ZF=1 VEYA SF!=OF
	dest <  src   =>  CF=1            |  SF!=OF


Koşulsuz Dallanma:
	- JMP              =>  JMP disp (IP += disp)
	                   =>  JMP reg (IP = reg)
	                   =>  JMP mem (IP = mem)
	- JMP FAR PTR      =>  JMP FAR PTR idata1:idata2  (CS = idata1, IP = idata2)
					   =>  JMP FAR PTR mem  (IP = [mem], CS = [mem+2])


Çağırma Komutları:
	- CALL             =>  CALL disp  (IP = IP + disp)
	                   =>  CALL reg  (IP = reg)
	- CALL FAR PTR     =>  CALL FAR PTR mem  (IP = [mem],  CS = [mem+2])
	                   =>  CALL FAR PTR idata1:idata2  (CS = idata1,  IP = idata2)
	- INT              =>  INT idata
	- INTO             =>  INTO  (denk INTO = INT 04H)


Dönüş Komutları:
	- RET      =>  yığından IP çekilir
	- RETF     =>  yığından IP,CS çekilir
	- IRET     =>  yığından IP,CS,FLAG çekilir




-------------------------------- HAFTA 4 --------------------------------


Yığın Komutları:
	- POP        =>  POP regw, POP mem  (dest = SS:[SP])
	- POPF       =>  POPF  (flag = SS:[SP])
	- PUSH       =>  PUSH regw, PUSH mem, PUSH sreg, PUSH idata  (SS:[SP] = src)
	- PUSHF      =>  PUSHF  (SS:[SP] = flag)



Döngü Komutları:
	- LOOP
	- LOOPZ
	- LOOPNZ
	- JCXZ

Döngüler için kağıtlara bak, ayrıca 3. sunum pdf'inde bir sürü örnek var.



Bayrak Komutları:
	- STC    =>  "STC", set carry flag, CF = 1
	- CLC    =>  "CLC", clear carry flag, CF = 0
	- CMC    =>  "CMC", complement carry flag, CF = CF'
	- STD    =>  "STD", set direction flag, DF = 1
	- CLD    =>  "CLD", clear direction flag, DF = 0
	- STI    =>  "STI", set interrupt flag, IF = 1
	- CLI    =>  "CLI", clear interrupt flag, IF = 0
	- LAHF   =>  load AH with flag,  AH <- SF,ZF,?,AF,?,PF,?,CF
	- SAHF   =>  store AH to flag,  SF,ZF,?,AF,?,PF,?,CF <- AH

LAHF, SAHF komutları belirtilen sıra ile bit bit geçirir, bunları maskelerle kullanabiliriz



Öteleme ve Döndürme Komutları:
	- SHL/SAL   =>  shift left, 2 ile çarpmakla aynıdır, overflow'a neden olabilir
	            =>  soldaki bit CF'ye gider sağdan 0 girer
	- SHR       =>  shift right, sağdaki bit CF'ye gider soldan 0 girer
	- SAR       =>  shift aritmetic right, 2 ile bölmekle aynıdır 
	            =>  sağdaki bit CF'ye gider ancak soldan 0 değil en sondaki bit yinelenir
	- RCL       =>  rotate through carry left, en soldaki CF'ye gider, CF de en sağdan girer
	- RCR       =>  rotate through carry left, en sağdaki CF'ye gider, CF de en soldan girer
	- ROL       =>  rotate left, en soldaki çıkıp hem CF'ye gider hem de en sağdan yeniden girer
	- ROR       =>  rotate right, en sağdaki çıkıp hem CF'ye gider hem de en soldan yeniden girer

Bunların hepsi aynı şekillerde kullanılır:
	SHL reg 1,  SHL reg CL,  SHL mem 1,  SHL mem CL

Bunların sunumda çok güzel görselleri var.

Shift'lerde bir bit yok oluyor ve öbür taraftan yerine 0 koyuyoruz
Rotate'lerde ise bir bit bir uçtan çıkıp öbür uçtan giriyor



örneklerin çözümleri: https://zoom.us/rec/play/nmqAZM7fGBxRZPTUJ2dpAy1AYoIT4I8f5FMIzdIxhimluTVfVHAlM5pfATI8UD7pAC1j6tHOtp7Ffc07.U8ufyX3uAe5_m_mY
1.30'dan sonra başlıyor



-------------------------------- HAFTA 5 --------------------------------


>>>>> STRING KOMUTLARI

Türleri:  MOVSB, MOVSW, CMPSB, CMPSW, SCASB, SCASW, LODSB, LODSW, STOSB, STOSW, CBW, CWD, REP, REPE/REPZ, REPNE/REPNZ

Anlamları:
	MOVS    =>  move string, bir string'i başka bir string'in bulunduğu yere kopyalar
	CMPS    =>  compare string, iki dizinin karşılıklı terimlerini çıkartarak string'leri compare eder, ilk fark bulmaya filan yarar
	SCAS    =>  scan string, string'in içinde bir terimi aramaya denk düşer, belirli bir char araması filan yapmaya yarar
	LODS    =>  load string, string'in terimlerini tek tek accumulator'a alır
	STOS    =>  store string, accumulator'daki değerleri teker teker string'e atar
	CBW     =>  convert byte to word, bildiğimiz byte to word
	CWD     =>  convert word to byte, bildiğimiz word to byte


Çoğu dizi komutunun sonu hem w hem de b ile biten biçimi vardır, bunlar aynı işlemi byte ve word dizileri için yaparlar

Ayrıca dizinin her terimi için bir işlemi yapmamızı sağlayan REP, REPZ, REPNZ önekleri vardır
Bunlar aynı LOOP, LOOPZ, LOOPNZ gibi çalışır, nasıl "LOOP <etiketAdı>" yazıyorsak burada da "REP <diziİşlemi>" yazarız
ÖNEMLİ NOT: loop ve rep komutları bayrakları ETKİLEMEZ

REP Komutları:
	REP             =>  CX=0 olana kadar tekrarla
	REPZ/REPE       =>  CX=0 veya ZF=0 olana kadar tekrarla
	REPNZ/REPNE     =>  CX=0 veya ZF=1 olana kadar tekrarla


String işlemlerinde işlemlerin yönü DF bayrağı ile belirlenir, DF=0 ise baştan sona, DF=1 ise sondan başa işlemler yapılır
DF bayrağını operand almayan "STD" ve "CLD" komutları ile değiştirebiliriz, sırayla 1 ve 0 yaparlar

String işlemlerinde sırayla şunları yaparız:
	1. SI ve DI değerlerini oluştur
	2. DF bayrağı ayarlanmalı
	3. CX döngü adedi belirlenmeli
	4. dizi komutu kullanılmalı



>>> MOVSB, MOVSW

Kullanım biçimleri:  "MOVSB", "MOVSW"

Yaptıkları şeyler:
	ES:[DI] <- DS:[SI]
	kullandığı DI/SI değerlerini W/B ve DF'ye bakarak değiştirir



>>> COMSB, COMSW

Kullanım biçimleri:  "COMSB", "COMSW"

Yaptıkları şeyler:
	DS:[SI] - ES:[DI]
	kullandığı DI/SI değerlerini W/B ve DF'ye bakarak değiştirir



>>> SCASB, SCASW

Kullanım biçimleri:  "SCASB", "SCASW"

Yaptıkları şeyler:
	byte ise  =>  AL - ES:[DI]
	word ise  =>  AX - ES:[DI]
	kullandığı DI/SI değerlerini W/B ve DF'ye bakarak değiştirir



>>> LODSB, LODSW

Kullanım biçimleri:  "LODSB", "LODSW"

Yaptıkları şeyler:
	byte ise  =>  AL <- DS:[SI]
	word ise  =>  AX <- DS:[SI]
	kullandığı DI/SI değerlerini W/B ve DF'ye bakarak değiştirir



>>> STOSB, STOSW

Kullanım biçimleri:  "STOSB", "STOSW"

Yaptıkları şeyler:
	byte ise  =>  ES:[DI] <- AL
	word ise  =>  ES:[DI] <- AX
	kullandığı DI/SI değerlerini W/B ve DF'ye bakarak değiştirir



>>> CBW, CWD

Sayıların işaretlerini düşünerek byte/word dönüşümü yapar.

Kullanım biçimleri:  "CBW", "CWD"

CBW   =>  AX <- AL
CWD   =>  DX:AX <- AX






>>>>> GİRİŞ ÇIKIŞ KOMUTLARI

Bu derste I/O komutlarını kullanmayacağız o yüzden öylesine öğreniyoruz.

8086'nın memory uzayının kapasitesi 1 MB'dır (2^20 * 8)
8086'nın I/O uzayının kapasitesi 64 KB'dır  (2^16 * 8)

Bu komutların adreslerine "port" denir.

Türleri:  IN,  OUT

IN AL, 8_bit_port
IN AX, 16_bit_port
IN AL, DX
IN AX, DX

OUT 8_bit_port, AL
OUT 16_bit_port, AX
OUT DX, AL
OUT DX, AX





>>>>> DURDURMA ve BEKLETME KOMUTLARI

HTL    =>  halt, işlemci durur ve kesme ile kaldığı yerden devam eder
NOP    =>  no operation
WAIT   =>  wait until not busy, yardımcı işlemcinin sonucunu beklemek için kullanılır




>>>>> BCD DÜZENLEME KOMUTLARI

Bunları da çok kullanmayacağız ancak öylesine değiniyoruz.

AAA   =>  ASCII adjust after addition
AAD   =>  ASCII adjust before division
AAM   =>  ASCII adjust after multiplication
AAS   =>  ASCII adjust after subtraction
DAA   =>  decimal adjust AL after addition
DAS   =>  decimal adjust AL after subtraction




>>>>> ADRESLEME MODLARI

Üç tip erişim için adresleme modu mevcuttur:
	Veri adresleme modları
	Program hafızası adresleme modları
	Yığın adresleme modları



>>> Veri adresleme modları


> Yazmaç Adresleme (Register Addressing)

Bildiğimiz yazmaç adlarını kullanarak adreslere erişmektir, işlemlerde yazmaçların boyutlarına dikkat edilmelidir.



> Hemen Adresleme (Immediate Addressing)

16 bit veya 8 bit sabit değer atamayı ifade eder
Hex/Dec/Bin/ASCII_Char şeklinde yazılabilir  =>  0F2H, 100, 00110000B, 'A'



> Doğrudan Adresleme (Direct Addressing)

Erişilecek hafıza gözünün doğrudan gösterildiği durumdur
İstersek bir değişken/etiket kullanırız istersek de doğrudan [1234H] içinde offset belirtiriz



> Yazmaç Dolaylı Adresleme (Register Indirect Addressing)

Alttakiler dışında hiçbir yazmaç burada kullanılamaz!

Segment türünden yalnızca şunlar kullanılır:  BP (SS ile)
Data türünden yalnızca şunlar kullanılır:  BX, DI, SI (DS ile)

Bunların bir kısmında boyut belirsizliği olacağından "WORD PTR" ve "BYTE PTR" ekleri konur



> Base+Index Addressing

Temelde bir dolaylı adresleme modudur

Base yazmacı (BX veya BP) işlem yapılacak hafıza konumunun başlangıcını göstermek için kullanılır

Index yazmaçları (DI veya SI) verinin bu başlangıç adresine görece yerini tutmak için kullanılır

[ BX/BP + DI/SI ] şeklindedir yani 4 adet türü vardır



> Yazmaç Göreli Adresleme (Register Relative Addressing)

BX/BP/DI/SI ve yanında bir statik değer toplaması ile erişim yapılabilir.

[ BX + 123H ],  [ BP + 123H ],  [ DI + 123H ],  [ SI + 123H ]



> Base Relative + Index Addressing

İki boyutlu veri adresleme için uygudur

[BX + SI + 100H],  [BX + 100H + SI]


NOT: burada herhangi bir adresleme verilip ne tür old sorulmaz ancak adresleme verilip valid olup olmadığı sorulur





>>> Program Hafızası Adresleme Modları

Program akışı sırasında fonksiyon çağırma, koşullu ve koşulsuz dallanma komutları IP ve CS değerlerini değiştirir.

Türleri:  Doğrudan,  Göreli,  Dolaylı


> Doğrudan

Mevcut kod segmentinden farklı bir kod segmentine geçiş sağlayacağı için segmentler arası bir işlemdir

Hem CS hem de IP değeri uygun şekilde değiştirilir

JMP 200H:300H ; CS = 200H, IP = 300H



> Göreli

Mevcut IP yazmacı değerine göre hangi program hafızasının adresleneceğini ifade eder

JMP 100
JMP 1000H



> Dolaylı

CALL ve JMP komutları ile kullanılır

JMP BX
CALL [BX]




>>> Yığın Adresleme Modları

8086’da yığın geçici veri saklamak için ve fonksiyonlardan dönüşlerde dönüş adreslerini saklamak için kullanılır

Tüm yazmaçlardan yığına veri basılabilir

CS hariç tüm yazmaçlara yığından veri çekilebilir

Yığın adresleme için SS:SP ikilisi kullanılır

PUSH yığına WORD basar
POP yığından WORD çeker

Her PUSH işleminde SP 1 ve SP 2 adreslerine 2 byte veri yazılır ve SP değeri 2 azaltılır
Her POP işleminde SP+1 ve SP+2 adreslerinden2 byte veri okunur ve SP değeri 2 arttırılır

PUSH CS ; çalışır
PUSH BL ; YANLIŞ 8 BIT OLMAZ
POP CS ; YANLIŞ CS'DEN VERI ÇEKILEMEZ



-------------------------------- HAFTA 6,7,8 --------------------------------



>>>>> DOSBOX Kurulumu


BIN\MASM.EXE deneme.asm
	=> boş bırak, enter
	=> deneme.lst, enter
	=> boş bırak, enter

BIN\LINK.EXE deneme.obj
	=> boş bırak, enter
	=> deneme.map, enter
	=> boş bırak, enter

BIN\DEBUG.EXE deneme.exe
	=> ? ile komutları görebilirsin
	=> t ile trace edersin
	=> r ile register'lara bakarsın
	=> p ile proceed edersin
	=> q ile quit edersin terminated olduğunda çıkmak için kullan
	=> d cs:0   ile CS'nin 0'dan itibaren dump komutunu yani belleğini göstermeyi yaparsın
	=> d ss:sp  ile SS'in SP offset'inden yani bakmamız gereken yerden içeriklerini görebiliriz
	            little endian old dolayı tersten yazılmış gibir olur ama bu beklenen bir davranıştır
	=> u cs:0   ile code segment'te bulunan kodları unassembly ile birlikte alıp yazdırırız yani koda bakabiliriz





>>>>> EXE TIPI PROGRAMLAR

Ana yordam bulunmak zorundadır, ana yordam FAR olmak zorundadır

EXE çalışınca OS'deki CS değeri DS'ye atanır ve OS, sonlanmak için EXE'den DS:00 dönüşünün yapılmasını bekler

PARA sözcüğü burada memory'ye dizim yapılırken özellikle 16'nın katlarına dizim yapılması gerektiğini belirtir
Örneğin 020AH yazarsak bu "02 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00" şeklinde çöp değerlerle doldurulup konur


> Genel biçimi:

STACKSG SEGMENT PARA STACK 'STACK'                 ; stack segment tanımıdır, STACK kelimesi ile stack segment olduğu tanımlanır
	DW 32 DUP(?)                                   ; ne kadar memory'ye sahip olacağını belirten kısım, yığın işlemleri word tipinde olduğundan
	                                               ; burada ayrılan alan her zaman çift sayı olmak zorundadır
STACKSG ENDS                                       ; stack segment sonu

DATASG SEGMENT PARA 'DATA'                         ; data segment tanımı, bu tanım bunu data segment yapmaz, yapılışı aşağıda iki satırdadır
SAYI DB ?
ELEMAN DW ?
DATASG ENDS                                        ; data segment yapılacak bu segment'in sonu

CODESG SEGMENT PARA 'CODE'                         ; code segmentini tanımlar
	ASSUME CS:CODESG, DS:DATASG, SS:STACKSG        ; bu segment'lerin label olarak değil segment olr offset olr anlaşılmasını sağlar

BASLA PROC FAR                                     ; FAR olmak zorundadır

	PUSH DS                                        ; bu üç kod satırı:
	XOR AX,AX                                      ; EXE’yi çağıran kodun kesim değeri DS’de, offset değeri 0, dönüş için bu değerler stack'e atılır
	PUSH AX                                        ;

	MOV AX, DATASG                                 ; bu iki satır üstteki DATASG kısmının data segment olmasını sağlar
	MOV DS, AX                                     ; bu iki satır üstteki DATASG kısmının data segment olmasını sağlar

	; bizim kodumuz buraya yazılır

	RETF

BASLA ENDP
CODESG ENDS
	END BASLA                                      ; EXE başlayınca çalıştırılacak yordamı belirtir





>>>>> SÖZDE KOMUTLAR (Pseudo Commands)

Doğrudan makine kodu karşılıkları yoktur, Assembly programlarını düzenlemeye yöneliktirler
Bunlar yalnızca compile kısmına işe yarar, runtime'da olmazlar


> LST uzantılı dosyanın düzenlenmesi
	- PAGE      =>  .lst uzantılı dosyanın satır sütün genişliğini printer'lar için belirler
	- TITLE     =>  .lst uzantılı dosya için her sayfa başına yazılacak başlığı belirler



> Program kesim düzenlemesi
	- SEGMENT/ENDS     =>  Kesim tanımlaması için kullanılır, bu tanım yapılırken hizalama ve birleştirme komutları kullanılır (aşağıda yazıyor)
	- ORG              =>  COM tipi programların 100H adresinden başlaması için kullanılır
	- ASSUME           =>  Kesim tanımlarının ne amaçla yapıldığı ve başlangıç adreslerini belirler


Hizalama komutları:
	BYTE : Kesim sıradaki adresten başlar
	WORD : Kesim sıradaki çift adresten başlar
	PARA : Kesim sıradaki 16’nın tam katından başlar
	PAGE : Kesim sıradaki 256’nın tam katından başlar

Birleştirme komutları:
	PUBLIC     : Aynı isimli kesimlerin peşpeşe yerleşmesini sağlar
	COMMON     : Aynı isimli kesimlerin aynı adresten başlamasını sağlar
	STACK      : Yığın mantığında (LIFO) kesim tanımlar
	AT #####   : Kesim adresi belirler



> Veri tanımlamaları
	- DB, DW, DD, DQ, DUP, PTR      =>  önceden görmüştük
	- EQU                           =>  C'deki #define ile tam olarak aynı şeydir
	- TYPEDEF                       =>  yeni bir veri türü tanımlamamızı sağlar
	- LABEL                         =>  LEA runtime'da yapılıyorken LABEL compile edilirken etki gösterir
.                                       örn word tipindeki bir veriyi byte byte okumamızı sağlar


> Yordam düzenleme
	- PROC/ENDP        =>  prosedür başlatma ve bitirme komutlarıdır
	- EXTRN, PUBLIC    =>  başka bir dosyadaki değişkeni ya da fonksiyonu kullanmamızı sağlar


> MACRO düzenleme
	- MACRO/ENDM     =>  makro tanımlama için varlardır
	- INCLUDE        =>  başka bir dosyadan makro eklemeye yarar
	- LOCAL          =>  tekrarlı label kullanımının önüne geçer


> Diğer
	- LENGTH     =>  DUP ile tanımlanan bir verinin boyutunu verir
	- TYPE       =>  bir değişkenin kaç byte yer kapladığını verir 
	- SIZE       =>  bir değişken için kaç byte yer ayrıldığını verir
	- OFFSET     =>  LEA ile doğrudan aynıdır, farkı runtime'da değil compile-time zamanında çalışmasıdır
	- SEG        =>  etiketin içinde yer aldığı kesim değerini verir
	- END        =>  ilk çalıştırılacak yordamı belirler




-------------------------------- HAFTA 9 --------------------------------


Assembly tipinde hatalar da uyarılar da aşırı önemlidir
Her zaman 0 uyarısız ve 0 hatasız şekilde kod yazmalıyızdır
İstisna olarak burada COM tipi uygulamalarda "no stack segment" uyarısı göz ardı edilir
Zaten COM tipi uygulamalarada stack segment olmadığını biliyoruzdur


COM Tipi compile etme:
	- masm
	- linker
	- exe2com


>>> COM Tipi Syntax 1 (üstte DS, altta CS)

Önemli not: burada yukarıda tanımlanan her değişken CS'deki offset'leri değiştirir o yüzden 10DH gibi bir yere ulaşma filan yapıyorken yukarıda tanımladıklarına dikkat etmelisin


CODESG SEGMENT PARA 'CODE'
	ORG 100H
	ASSUME CS:CODESG, SS:CODESG, DS:CODESG, ES:CODESG

BILGI: JMP BASLA
SAYIA DB ?
SAYIB DW ?


BASLA PROC NEAR
	; kodunu yaz

	RET
BASLA ENDP

CODESG ENDS
	END BILGI




>>> COM Tipi Syntax 2 (üstte CS, altta DS)

Önemli not: burada da tanımladığın kodlar verilerini daha aşağı offset'lere atar ona dikkat etmelisin


CODESG SEGMENT PARA 'CODE'
	ORG 100H
	ASSUME CS:CODESG, SS:CODESG, DS:CODESG, ES:CODESG

BASLA PROC NEAR
	; kodunu yaz

	RET
BASLA ENDP

SAYIA DB ?
SAYIB DW ?

CODESG ENDS
	END BASLA




-------------------------------- HAFTA 10 --------------------------------


>>>>> Prosedür olayları

İki tür prosedür vardır: FAR ve NEAR

NEAR prosedürler intrasegment'tir (segment içi)
	=> aynı segment içinde yordamlar tanımlanır ve doğrudan CALL edebiliriz
	=> stack içine bir tane offset atılması yapılır

FAR prosedürler intersegment'tir (segmentler arası)
	=> yordamlarımız farklı segment'ler içinde bulunur
	=> stack içine önce CS sonra bir offset atılması yapılır
	=> psödö EXTRN, PUBLIC komutları ile kimin kimi çağırdığını belirtiriz (yazılması zorunlu)
	=> masm kod1.asm
	=> masm kod2.asm
	=> link kod1.obj + kod2.obj
	=> debug olusturdugunExe.exe

Herhangi bir yordamı çağırmak için CALL komutunu kullanırız.
Bu komut "CALL yordam_ismi" şeklinde çalıştırılır ve bu yordamın offset'ini alarak çalışır aslında JMP ile aynıdır yani

Yordam yazdığımızda içinde değişebilecek her register'ı stack'e atıp sonradan çekmeliyiz ki değerleri korunsun (PUSH, POP)


> Aşağıdaki gibi istediğimiz kadar (64kb'a sığacak kadar) yordam yazabiliriz:

CODESEG SEGMENT PARA 'K'

yordam1 PROC FAR      ;  ya da "PROC NEAR"
	; code
	RETF                  ;  ya da NEAR ise "RET"
yordam1 ENDP

yordam2 PROC NEAR
	; code
	RET
yordam2 ENDP

CODESEG ENDS




>>>>> MAKROLAR

makro_ismi MACRO {parametreler}
	LOCAL …
	; code
	ENDM


.mac uzantılı şekilde kaydederiz, içinde LOCAL kullanabiliriz (kopyala yapıştır bozulmasın diye), INCLUDE ile başka bir dosyadan aktarabiliriz
İstersek aynı dosyada içinde kullanacağımız prosedürün hemen üstünde de yazabiliriz


-------------------------------- SON --------------------------------







